#!/usr/bin/env node

const program = require('caporal')
const updateNotifier = require('update-notifier')
const ora = require('ora')
const chalk = require('chalk')
const pkg = require('../package.json')
const WPCS = require('../index')
const logger = require('../lib/logger')

const action = (args, options) => {
  let dirpath = args.path
  if (!dirpath) {
    dirpath = process.cwd()
  }

  let rule = options.rule
  if (!rule) {
    rule = 'WordPress'
  }

  const wpcs = new WPCS(dirpath, rule)
  const spinner = ora('Scanning Files')
  const logs = {}

  wpcs.on('start', () => {
    logger.blank()
    spinner.start()
  })

  wpcs.on('scan', filename => {
    if (filename) {
      spinner.text = `Scanning ${filename}`
    }
  })

  const addToLog = (filename, info) => {
    if (!logs[filename]) {
      logs[filename] = []
    }
    logs[filename].push(info)
  }

  wpcs.on('error', addToLog)

  if (!options.skipWarning) {
    wpcs.on('warning', addToLog)
  }

  wpcs.on('done', totals => {
    if (totals.errors > 0 || totals.warnings > 0) {
      spinner.succeed(`Scanned ${totals.files} files.`)

      for (const filename in logs) {
        if (Object.prototype.hasOwnProperty.call(logs, filename)) {
          logger.blank()
          logger.tab(`${chalk.underline.white(filename)}`)
          logs[filename].forEach(item => {
            switch (item.type) {
              case 'ERROR':
                logger.error(item)
                break
              case 'WARNING':
                logger.warning(item)
                break
            }
          })
        }
      }

      logger.blank()
      logger.symbol(`You've got ${totals.errors} errors and ${totals.warnings} warnings.`, 'error')
      logger.blank()
      if (!options.autofix) {
        process.exit(1)
      }

      if (options.autofix) {
        wpcs.fix()
      }
    } else {
      spinner.succeed('Done. No Error or Warning Found.')
      logger.blank()
      process.exit()
    }
  })

  const fixspinner = ora('Fixing Violations')
  wpcs.on('fix', () => {
    logger.blank()
    fixspinner.start()
  })

  wpcs.on('fixing', filename => {
    fixspinner.text = `Fixing ${filename}`
  })

  wpcs.on('fixed', files => {
    fixspinner.succeed(`${files.length} files has been fixed.`)
  })
}

program
  .version(pkg.version)
  .description('Check WordPress Coding Standard')
  .argument('[path]', 'Script path could be a directory or filename.')
  .option('--rule <rulename>', 'Default rule is WordPress. WordPress | Wordpress-Core | Wordpress-Docs | WordPress-Extra.', program.STRING)
  .option('--autofix', 'Auto fix errors.', program.BOOLEAN)
  .option('--skip-warning', 'Skip Warning.', program.BOOLEAN)
  .action(action)

program.parse(process.argv)

// Notify update, cached every hour
updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60
}).notify()
